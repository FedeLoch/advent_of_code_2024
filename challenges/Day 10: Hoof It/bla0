"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRAMethodReturnExit>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"SimpleStackBasedCogit(Object)>>assert:description:\rSimpleStackBasedCogit(Object)>>assert:\rSimpleStackBasedCogit>>genReturnTopFromBlock\r[ | descriptor result |\r\t\tcogit needsFrame: true.\r\t\tcogit methodObj: (testToExecute objectBuilder instantiate: solution inputConstraints method).\r\t\tcogit byte0: bytecode.\r\t\tcogit bytecodePC: 0.\r\t\tcogit endPC: 0.\r\t\tsolution inputConstraints operandStack reversed do: [ :aStackValue | \r\t\t\tcogit genPushLiteral: (testToExecute objectBuilder instantiate: aStackValue) ].\r\r\t\tdescriptor := cogit generatorAt: bytecode.\r\t\tresult := cogit perform: descriptor generator.\r\t\tsolution exitCondition returnResultInto: self\r\t] in RAConcolicBytecodeCase>>runOn: in Block: [ | descriptor result |...\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compileWithoutOutput:bytecodes:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"SimpleStackBasedCogit(Object)>>assert:description:\rSimpleStackBasedCogit(Object)>>assert:\rSimpleStackBasedCogit>>genReturnTopFromBlock\r[ | descriptor result |\r\t\tcogit needsFrame: true.\r\t\tcogit methodObj: (testToExecute objectBuilder instantiate: solution inputConstraints method).\r\t\tcogit byte0: bytecode.\r\t\tcogit bytecodePC: 0.\r\t\tcogit endPC: 0.\r\t\tsolution inputConstraints operandStack reversed do: [ :aStackValue | \r\t\t\tcogit genPushLiteral: (testToExecute objectBuilder instantiate: aStackValue) ].\r\r\t\tdescriptor := cogit generatorAt: bytecode.\r\t\tresult := cogit perform: descriptor generator.\r\t\tsolution exitCondition returnResultInto: self\r\t] in RAConcolicBytecodeCase>>runOn: in Block: [ | descriptor result |...\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compileWithoutOutput:bytecodes:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"RAPrimitiveAutoTest(Object)>>doesNotUnderstand: #executeUntilReturn\rRAConcolicBytecodeCase>>executePrimitiveFailure:\rRAPrimitiveFailure>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r[ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ :case |...\rArray(SequenceableCollection)>>do:\rRAConcolicRunner>>run:with:\r",
"RAPrimitiveAutoTest(Object)>>doesNotUnderstand: #executeUntilReturn\rRAConcolicBytecodeCase>>executePrimitiveFailure:\rRAPrimitiveFailure>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r[ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ :case |...\rArray(SequenceableCollection)>>do:\rRAConcolicRunner>>run:with:\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRAMethodReturnExit>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRAMethodReturnExit>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRAMethodReturnExit>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicBytecodeCase>>executeUntilReturn\rRAMethodReturnExit>>executeTest:\rRAConcolicBytecodeCase(RAConcolicCase)>>execute\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"SimpleStackBasedCogit(Object)>>assert:description:\rSimpleStackBasedCogit(Object)>>assert:\rSimpleStackBasedCogit>>genReturnNilFromBlock\r[ | descriptor result |\r\t\tcogit needsFrame: true.\r\t\tcogit methodObj: (testToExecute objectBuilder instantiate: solution inputConstraints method).\r\t\tcogit byte0: bytecode.\r\t\tcogit bytecodePC: 0.\r\t\tcogit endPC: 0.\r\t\tsolution inputConstraints operandStack reversed do: [ :aStackValue | \r\t\t\tcogit genPushLiteral: (testToExecute objectBuilder instantiate: aStackValue) ].\r\r\t\tdescriptor := cogit generatorAt: bytecode.\r\t\tresult := cogit perform: descriptor generator.\r\t\tsolution exitCondition returnResultInto: self\r\t] in RAConcolicBytecodeCase>>runOn: in Block: [ | descriptor result |...\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compileWithoutOutput:bytecodes:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"SimpleStackBasedCogit(Object)>>assert:description:\rSimpleStackBasedCogit(Object)>>assert:\rSimpleStackBasedCogit>>genReturnNilFromBlock\r[ | descriptor result |\r\t\tcogit needsFrame: true.\r\t\tcogit methodObj: (testToExecute objectBuilder instantiate: solution inputConstraints method).\r\t\tcogit byte0: bytecode.\r\t\tcogit bytecodePC: 0.\r\t\tcogit endPC: 0.\r\t\tsolution inputConstraints operandStack reversed do: [ :aStackValue | \r\t\t\tcogit genPushLiteral: (testToExecute objectBuilder instantiate: aStackValue) ].\r\r\t\tdescriptor := cogit generatorAt: bytecode.\r\t\tresult := cogit perform: descriptor generator.\r\t\tsolution exitCondition returnResultInto: self\r\t] in RAConcolicBytecodeCase>>runOn: in Block: [ | descriptor result |...\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compileWithoutOutput:bytecodes:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicBytecodeCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"RAPrimitiveAutoTest(TestAsserter)>>assert:description:resumable:\rRAPrimitiveAutoTest(TestAsserter)>>assert:description:\rRAPrimitiveAutoTest(TestAsserter)>>assert:equals:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r[ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ :case |...\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"RAPrimitiveAutoTest(TestAsserter)>>assert:description:resumable:\rRAPrimitiveAutoTest(TestAsserter)>>assert:description:\rRAPrimitiveAutoTest(TestAsserter)>>assert:equals:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r[ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ :case |...\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"RAPrimitiveAutoTest(TestAsserter)>>assert:description:resumable:\rRAPrimitiveAutoTest(TestAsserter)>>assert:description:\rRAPrimitiveAutoTest(TestAsserter)>>assert:equals:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r[ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ :case |...\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"RAPrimitiveAutoTest(TestAsserter)>>assert:description:resumable:\rRAPrimitiveAutoTest(TestAsserter)>>assert:description:\rRAPrimitiveAutoTest(TestAsserter)>>assert:equals:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r[ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ :case |...\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: until\r\t\t\t\ttimeout: remainingTimeout\r\t\t\t\tcount: remainingCount.\r\r\t\t\t\tstopReason ifNotNil: [\r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count:\rUnicornI386Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\r",
"Unicorn>>verifyErrorCode:\r[result :=  simulator\r\t\t\t\tstartAt: self instructionPointerRegisterValue\r\t\t\t\tuntil: 0\r\t\t\t\ttimeout: 0\r\t\t\t\tcount: 1.\r\t\t\t\t\t\r\t\t\t\tstopReason ifNotNil: [ \r\t\t\t\t\t\terror := stopReason.\r\t\t\t\t\t\tstopReason := nil.\r\t\t\t\t\t\terror signal ].\r\t\t\r\t\t\t\"If execution did not stop because of a stop reason, verify the error code\"\r\t\t\tsimulator verifyErrorCode: result.\r\r\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [result :=  simulator...\rFullBlockClosure(BlockClosure)>>on:do:\rUnicornARMv5Simulator>>doStartAt:until:timeout:count:\rUnicornARMv5Simulator(UnicornSimulator)>>startAt:until:timeout:count:\rUnicornARMv5Simulator>>startAt:until:timeout:count:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:timeout:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>runFrom:until:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleReadSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #signedIntFromLong\rCogIA32Compiler>>concretizeCall\rCogIA32Compiler>>dispatchConcretize\rCogIA32Compiler(CogAbstractInstruction)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #signedIntFromLong\rCogIA32Compiler>>concretizeCall\rCogIA32Compiler>>dispatchConcretize\rCogIA32Compiler(CogAbstractInstruction)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #signedIntFromLong\rCogIA32Compiler>>concretizeCall\rCogIA32Compiler>>dispatchConcretize\rCogIA32Compiler(CogAbstractInstruction)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #signedIntFromLong\rCogIA32Compiler>>concretizeCall\rCogIA32Compiler>>dispatchConcretize\rCogIA32Compiler(CogAbstractInstruction)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #signedIntFromLong\rCogIA32Compiler>>concretizeCall\rCogIA32Compiler>>dispatchConcretize\rCogIA32Compiler(CogAbstractInstruction)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #signedIntFromLong\rCogIA32Compiler>>concretizeCall\rCogIA32Compiler>>dispatchConcretize\rCogIA32Compiler(CogAbstractInstruction)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #'\\\\'\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeCall\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>dispatchConcretize\rCogOutOfLineLiteralsARMCompiler(CogAbstractInstruction)>>concretizeAt:\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UndefinedObject(Object)>>doesNotUnderstand: #'\\\\'\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeCall\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>dispatchConcretize\rCogOutOfLineLiteralsARMCompiler(CogAbstractInstruction)>>concretizeAt:\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UndefinedObject(Object)>>doesNotUnderstand: #'\\\\'\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeCall\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>dispatchConcretize\rCogOutOfLineLiteralsARMCompiler(CogAbstractInstruction)>>concretizeAt:\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UndefinedObject(Object)>>doesNotUnderstand: #'\\\\'\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeCall\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>dispatchConcretize\rCogOutOfLineLiteralsARMCompiler(CogAbstractInstruction)>>concretizeAt:\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UndefinedObject(Object)>>doesNotUnderstand: #'\\\\'\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeCall\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>dispatchConcretize\rCogOutOfLineLiteralsARMCompiler(CogAbstractInstruction)>>concretizeAt:\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UndefinedObject(Object)>>doesNotUnderstand: #'\\\\'\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeCall\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>dispatchConcretize\rCogOutOfLineLiteralsARMCompiler(CogAbstractInstruction)>>concretizeAt:\rCogOutOfLineLiteralsARMCompiler(CogARMCompiler)>>concretizeAt:\rSimpleStackBasedCogit(Cogit)>>generateInstructionsAt:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:headerSize:\rRAPrimitiveAutoTest(VMSimpleStackBasedCogitAbstractTest)>>compile:bytecodes:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\r",
"UndefinedObject(Object)>>doesNotUnderstand: #evaluate\rRAObjectBuilder>>instantiateObject:\rRAObject>>evaluateWith:\rRAObjectBuilder>>instantiate:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"UndefinedObject(Object)>>doesNotUnderstand: #evaluate\rRAObjectBuilder>>instantiateObject:\rRAObject>>evaluateWith:\rRAObjectBuilder>>instantiate:\rRAConcolicPrimitiveCase>>executeUntilReturn\rRASuccess>>executeTest:\rRAConcolicPrimitiveCase(RAConcolicCase)>>execute\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornI386Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornI386Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ]] in UnicornI386Simulator(UnicornSimulator)>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Dictionary>>errorKeyNotFound:\r[self errorKeyNotFound: key] in Dictionary>>at: in Block: [self errorKeyNotFound: key]\rDictionary>>at:ifAbsent:\rDictionary>>at:\rSimpleStackBasedCogit(Cogit)>>handleCallOrJumpSimulationTrap:\rSimpleStackBasedCogit(Cogit)>>handleSimulationTrap:\r[ :invalidAccess |\r\t\tself cogit handleSimulationTrap: (UnicornSimulationTrap simulator: self error: invalidAccess).\r\t\ttrue] in UnicornARMv5Simulator(UnicornSimulator)>>initialize in Block: [ :invalidAccess |...\rUnicornARMv5Simulator(UnicornSimulator)>>handleInvalidAccess:\r[ :invalidAccess |\r\t\t\t\t\tself instructionPointerRegisterValue = until ifTrue: [ ^ 0 ].\r\t\t\t\t\t\r\t\t\t\t\t(self handleInvalidAccess: invalidAccess)\r\t\t\t\t\t\tifFalse: [ ^ result ].\r\t\t\t\t\t\t\r\t\t\t\t\tactualCount := actualCount + 1 ] in UnicornARMv5Simulator>>doStartAt:until:timeout:count: in Block: [ :invalidAccess |...\rFullBlockClosure(BlockClosure)>>cull:\r",
"Stack(Collection)>>errorEmptyCollection\rStack(Collection)>>emptyCheck\rStack(LinkedList)>>lastLink\rStack(LinkedList)>>last\rRAConcolicPrimitiveCase>>primitiveReceiver\rRAConcolicPrimitiveCase>>receiverTags\rRAPrimitiveAutoTest(RAAbstractAutoTest)>>setUp:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r",
"Stack(Collection)>>errorEmptyCollection\rStack(Collection)>>emptyCheck\rStack(LinkedList)>>lastLink\rStack(LinkedList)>>last\rRAConcolicPrimitiveCase>>primitiveReceiver\rRAConcolicPrimitiveCase>>receiverTags\rRAPrimitiveAutoTest(RAAbstractAutoTest)>>setUp:\rRAConcolicPrimitiveCase>>runOn:\r[ case runOn: theTestToRun ] in [ :case |\r\t\t| theTestToRun |\r\t\ttheTestToRun := self newTestForCase: case fromPrototype: test.\r\t\t('Running ', case asString) traceCr.\r\t\t[ case runOn: theTestToRun ]\r\t\t\ton: Error, TestFailure\r\t\t\tdo: [ :e | res add: e signalerContext shortDebugStack \"ignore the exception and continue\" ].\r\t\t\"Cleanup the test if required\"\r\t\tcase tearDown.\r\t\tcase solution ] in RAConcolicRunner>>run:with: in Block: [ case runOn: theTestToRun ]\rFullBlockClosure(BlockClosure)>>on:do:\r"